// <auto-generated />
using System;
using Arbitrage.WebApi.Infastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arbitrage.WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Arbitrage.Domain.TelegramBot.Entities.TelegramUserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TelegramUserSettings");
                });

            modelBuilder.Entity("Arbitrage.Exchange.Domain.Entities.ExchangeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrencyPairId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketType")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyPairId");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Entities.ArbitrageCandle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseCoinId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeLongId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeShortId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketTypeLong")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketTypeShort")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteCoinId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseCoinId");

                    b.HasIndex("ExchangeLongId");

                    b.HasIndex("ExchangeShortId");

                    b.HasIndex("QuoteCoinId");

                    b.ToTable("ArbitrageCandle");
                });

            modelBuilder.Entity("Arbitrage.Notification.Domain.Entities.NotificationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrencyPairId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Arbitrage.Scaner.Domain.Entities.ScanerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseCoinId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeIdLong")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeIdShort")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundingRateLong")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundingRateShort")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketTypeLong")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketTypeShort")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePriceLong")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePriceShort")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteCoinId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TickerLongId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TickerShortId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseCoinId");

                    b.HasIndex("ExchangeIdLong");

                    b.HasIndex("ExchangeIdShort");

                    b.HasIndex("QuoteCoinId");

                    b.HasIndex("TickerLongId");

                    b.HasIndex("TickerShortId");

                    b.ToTable("ScanerData");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseCoinId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteCoinId")
                        .HasColumnType("TEXT");

                    b.Property<int>("exchangeType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseCoinId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("QuoteCoinId");

                    b.ToTable("CurrencyPairs");
                });

            modelBuilder.Entity("Arbitrage.User.Domain.Entities.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastActive")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TelegramUserSettingsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TelegramUserSettingsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Candle", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.CurrencyPair", "Pair")
                        .WithMany()
                        .HasForeignKey("CurrencyPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Entities.ArbitrageCandle", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "BaseCoin")
                        .WithMany()
                        .HasForeignKey("BaseCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "ExchangeLong")
                        .WithMany()
                        .HasForeignKey("ExchangeLongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "ExchangeShort")
                        .WithMany()
                        .HasForeignKey("ExchangeShortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "QuoteCoin")
                        .WithMany()
                        .HasForeignKey("QuoteCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCoin");

                    b.Navigation("ExchangeLong");

                    b.Navigation("ExchangeShort");

                    b.Navigation("QuoteCoin");
                });

            modelBuilder.Entity("Arbitrage.Scaner.Domain.Entities.ScanerModel", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "BaseCoin")
                        .WithMany()
                        .HasForeignKey("BaseCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "ExchangeLong")
                        .WithMany()
                        .HasForeignKey("ExchangeIdLong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "ExchangeShort")
                        .WithMany()
                        .HasForeignKey("ExchangeIdShort")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "QuoteCoin")
                        .WithMany()
                        .HasForeignKey("QuoteCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.CurrencyPair", "TickerLong")
                        .WithMany()
                        .HasForeignKey("TickerLongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.CurrencyPair", "TickerShort")
                        .WithMany()
                        .HasForeignKey("TickerShortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCoin");

                    b.Navigation("ExchangeLong");

                    b.Navigation("ExchangeShort");

                    b.Navigation("QuoteCoin");

                    b.Navigation("TickerLong");

                    b.Navigation("TickerShort");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "BaseCoin")
                        .WithMany()
                        .HasForeignKey("BaseCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "QuoteCoin")
                        .WithMany()
                        .HasForeignKey("QuoteCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCoin");

                    b.Navigation("Exchange");

                    b.Navigation("QuoteCoin");
                });

            modelBuilder.Entity("Arbitrage.User.Domain.Entities.UserModel", b =>
                {
                    b.HasOne("Arbitrage.Domain.TelegramBot.Entities.TelegramUserSettings", "TelegramUserSettings")
                        .WithMany()
                        .HasForeignKey("TelegramUserSettingsId");

                    b.Navigation("TelegramUserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
