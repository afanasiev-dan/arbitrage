// <auto-generated />
using System;
using Arbitrage.WebApi.Infastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arbitrage.WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818144859_AddScanerTable")]
    partial class AddScanerTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Arbitrage.Exchange.Domain.Entities.ExchangeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrencyPairId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketType")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyPairId");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("Arbitrage.Scaner.Domain.Entities.ScanerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseCoinName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeNameLong")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeNameShort")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundingRateLong")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FundingRateShort")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketTypeLong")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketTypeShort")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePriceLong")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePriceShort")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteCoinName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScanerData");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BaseCoinId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MarketType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuoteCoinId")
                        .HasColumnType("TEXT");

                    b.Property<int>("exchangeType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseCoinId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("QuoteCoinId");

                    b.ToTable("CurrencyPairs");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Candle", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.CurrencyPair", "Pair")
                        .WithMany()
                        .HasForeignKey("CurrencyPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "BaseCoin")
                        .WithMany()
                        .HasForeignKey("BaseCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Coin", "QuoteCoin")
                        .WithMany()
                        .HasForeignKey("QuoteCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCoin");

                    b.Navigation("Exchange");

                    b.Navigation("QuoteCoin");
                });
#pragma warning restore 612, 618
        }
    }
}
