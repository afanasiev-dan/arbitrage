// <auto-generated />
using System;
using Arbitrage.WebApi.Infastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arbitrage.WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722191925_SymbolIdIsIntType")]
    partial class SymbolIdIsIntType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Arbitrage.Exchange.Domain.Entities.ExchangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExchangeModel");
                });

            modelBuilder.Entity("Arbitrage.Graph.Domain.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<string>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseCoinId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuoteCoinId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseCoinId");

                    b.HasIndex("QuoteCoinId");

                    b.ToTable("CurrencyPairs");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.ExchangeFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomSeparator")
                        .HasColumnType("TEXT");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("ExchangeFormats");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.CurrencyPair", b =>
                {
                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Symbol", "BaseCoin")
                        .WithMany()
                        .HasForeignKey("BaseCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arbitrage.Symbols.Domain.Entities.Symbol", "QuoteCoin")
                        .WithMany()
                        .HasForeignKey("QuoteCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCoin");

                    b.Navigation("QuoteCoin");
                });

            modelBuilder.Entity("Arbitrage.Symbols.Domain.Entities.ExchangeFormat", b =>
                {
                    b.HasOne("Arbitrage.Exchange.Domain.Entities.ExchangeModel", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });
#pragma warning restore 612, 618
        }
    }
}
